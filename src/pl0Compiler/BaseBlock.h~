#pragma once

#include <deque>
#include <string>
using namespace std;

class BaseBlock
{
public:
	static int flag[10000];
	static deque<string>activeVar;
	//static int flagToProc[10000];
	static deque<int> in[1000];
	static deque<int> out[1000];
	static deque<string> use[1000];
	static deque<string> define[1000];
	static deque<string> varIn[1000];
	static deque<string> varOut[1000];
	void init();
	void print();
	int findFlag(string s);
	int isCompareFalse(string s);
	int existsOut(int blockID,int id);
	int isCalc(string op);
	void  addUse(int blockID,string id);
	void addDefine(int blockID,string id);
	int isCompare(string s);
	void activeVarInit();
	int existsVarIn(int blockID,string id);
	int existsVarOut(int blockID,string id);
	int existsDefine(int blockID,string id);
	void activeVarBegin();
	bool activeVarExists(string s);
	//void conflictGraghBuilt();
	//void 
};

